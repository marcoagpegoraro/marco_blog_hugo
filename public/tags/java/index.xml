<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Blog do Marco(Marco&#39;s Blog)</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on Blog do Marco(Marco&#39;s Blog)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© [Marco Pegoraro](https://marcoagpegoraro.com.br).</copyright>
    <lastBuildDate>Sat, 22 Aug 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Utilizando CompletableFuture para fazer requisições assíncronas em uma aplicação Spring Cloud</title>
      <link>http://localhost:1313/posts/utilizando-completablefuture-para-fazer-requisi%C3%A7%C3%B5es-ass%C3%ADncronas-em-uma-aplica%C3%A7%C3%A3o-spring-cloud-4/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/utilizando-completablefuture-para-fazer-requisi%C3%A7%C3%B5es-ass%C3%ADncronas-em-uma-aplica%C3%A7%C3%A3o-spring-cloud-4/</guid>
      <description>Com um mundo cada vez mais demandando velocidade e usuários cada vez mais exigentes, surge a necessidade de realizar otimizações em aplicações rest para o tempo de requisição ser o menor possível.&#xA;Imagine um cenário onde você possui um orquestrador e para devolver a resposta para seu usuário, você precisa realizar outras requisições HTTP em outros microsserviços,&#xA;Para demonstrar como realizar requisições assíncronas no Spring Cloud utilizando o CompletableFuture do Java 8, será criado um projeto orquestrador que retornará os dados de um usuário, e para agrupar os dados desse usuário, será necessário fazer três requisições para três REST APIs diferentes.</description>
    </item>
  </channel>
</rss>
